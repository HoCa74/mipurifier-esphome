esphome:
  name: mipurifier
  comment: for Xiaomi Mi Air Purifier 3H (and similar models using the same protocol)
  includes:
  - mipurifier.h

# Required configuration for the weird single core ESP-WROOM-32D module
esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_FREERTOS_UNICORE: y
    advanced:
      ignore_efuse_mac_crc: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mipurifier Fallback Hotspot"
    password: "PyCfsbmzuMbj"

# Initialize the serial connection to the STM32 microcontroller
uart:
  id: uart_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 115200

# Main switch for turning on/off the unit
switch:
- platform: custom
  lambda: |-
    MiPurifier *mipurifier = MiPurifier::getInstance(id(uart_bus));
    App.register_component(mipurifier);
    return {mipurifier};
  switches:
  - name: "Power"

# Expose measured environmental values, remaining filter life, and the speed level in manual mode
sensor:
- platform: custom
  lambda: |-
    MiPurifier *mipurifier = MiPurifier::getInstance(id(uart_bus));
    return {
      mipurifier->airquality_sensor,
      mipurifier->humidity_sensor,
      mipurifier->temperature_sensor,
      mipurifier->filterlife_sensor,
      mipurifier->manualspeed_sensor
    };
  sensors:
  - name: "Air quality (PM2.5)"
    unit_of_measurement: "µg/m³"
    device_class: pm25
  - name: "Humidity"
    unit_of_measurement: "%"
    device_class: humidity
  - name: "Temperature"
    unit_of_measurement: "°C"
    device_class: temperature
    accuracy_decimals: 1
  - name: "Filter remaining"
    unit_of_measurement: "%"
    icon: mdi:air-filter
  - name: "Manual Speed"
    icon: mdi:fan

# Expose the current mode as a text sensor
text_sensor:
- platform: custom
  lambda: |-
    MiPurifier *mipurifier = MiPurifier::getInstance(id(uart_bus));
    return {mipurifier->mode_sensor};
  text_sensors:
    name: "Mode"
